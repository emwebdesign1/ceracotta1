generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ========= Enums =========
enum Role {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELED
}

enum PaymentMethod {
  CARD
  TWINT
}

enum PaymentProvider {
  STRIPE
  TWINT
}

// ========= Mod√®les =========
model User {
  id           String  @id @default(cuid())
  email        String  @unique
  passwordHash String
  firstName    String?
  lastName     String?
  username     String? @unique
  phone        String?
  role Role @default(CUSTOMER)

  // Adresse ‚Ä¶
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart   Cart?
  orders Order[]

  // üëá NEW: back-relation n√©cessaire pour WishlistItem.user
  wishlistItems WishlistItem[]

  @@index([email])
}

model Category {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
}

model Product {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  slug        String  @unique
  description String? @db.MediumText
  price       Int

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  stock          Int     @default(0)
  pieceDetail    String? @db.MediumText
  careAdvice     String? @db.MediumText
  shippingReturn String? @db.MediumText

  // Galerie "g√©n√©rale" (existante)
  images   ProductImage[]
  // Pastilles couleur (existantes)
  colors   ProductColor[]
  // Tailles / variantes (existant)
  variants Variant[]

  // üî• NOUVEAU : back-relation pour Image.product
  imagesLinked Image[] // (ne remplace pas ProductImage[], juste pour fermer la relation)

  cartItems  CartItem[]
  orderItems OrderItem[]

  wishlistItems     WishlistItem[]
  anonWishlistItems AnonWishlistItem[]
}

model ProductImage {
  id        String @id @default(cuid())
  productId String
  url       String
  position  Int    @default(0)

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, position])
  @@index([productId])
}

model ProductColor {
  id        String  @id @default(cuid())
  productId String
  name      String?
  hex       String?

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

// --- Variantes (tailles / √©ventuellement couleur de la variante)
model Variant {
  id        String  @id @default(cuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  size      String?
  color     String?
  price     Int?
  stock     Int     @default(0)
  sku       String?

  // üî• NOUVEAU : images propres √† la variante (ex: packshots par taille/couleur)
  images Image[]

  // üî• NOUVEAU : back-relations pour CartItem.variant et OrderItem.variant
  cartItems  CartItem[]
  orderItems OrderItem[]
}

// --- Banque d'images flexible : peut pointer vers un produit, une variante, et/ou une couleur
model Image {
  id       String @id @default(cuid())
  url      String
  position Int    @default(0)

  // Optionnel : rattacher l'image √† un produit (en plus ou √† la place de ProductImage)
  product   Product? @relation(fields: [productId], references: [id])
  productId String?

  // Optionnel : rattacher l'image √† une variante pr√©cise
  variant   Variant? @relation(fields: [variantId], references: [id])
  variantId String?

  // Optionnel : image d√©di√©e √† une couleur hex (ex: "#000000")
  colorHex String?
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique // ‚Üê String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id         String   @id @default(cuid())
  cartId     String
  productId  String
  title      String
  unitPrice  Int?
  quantity   Int
  image      String?

  // Variante (scalar + relation)
  variantId  String?  
  variant    Variant? @relation(fields: [variantId], references: [id])

  // Options libres
  color      String?
  size       String?

  cart       Cart     @relation(fields: [cartId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
}



model Order {
  id              String          @id @default(cuid())
  userId          String? // ‚Üê String?
  amount          Int
  currency        String          @default("CHF")
  status          OrderStatus     @default(PENDING)
  paymentMethod   PaymentMethod
  paymentProvider PaymentProvider @default(STRIPE)
  paymentIntentId String?
  paymentStatus   String?
  shippingAddress Json?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  user  User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  items OrderItem[]

  @@index([userId])
  @@index([createdAt])
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  variantId String?

  title     String
  unitPrice Int
  quantity  Int
  image     String?

  order   Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant Variant? @relation(fields: [variantId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@index([variantId])
}

enum EventType {
  PAGE_VIEW
  PRODUCT_VIEW
  ADD_TO_CART
  REMOVE_FROM_CART
  BEGIN_CHECKOUT
  PURCHASE
  FAVORITE_ADD
  FAVORITE_REMOVE
}

model Visitor {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  lastSeenAt DateTime  @updatedAt
  ipHash     String?
  userAgent  String?
  sessions   Session[]
}

model Session {
  id          String    @id @default(cuid())
  visitorId   String
  visitor     Visitor   @relation(fields: [visitorId], references: [id])
  startedAt   DateTime  @default(now())
  endedAt     DateTime?
  utmSource   String?
  utmMedium   String?
  utmCampaign String?
  referrer    String?
  events      Event[]
}

model Event {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  type      EventType
  sessionId String
  session   Session   @relation(fields: [sessionId], references: [id])
  path      String?
  productId String?
  value     Int?
  currency  String?
  meta      Json?

  @@index([createdAt])
  @@index([sessionId])
  @@index([type, createdAt])
  @@index([productId, createdAt]) // üëà ajoute ceci
}

model DailyProductStat {
  id         String   @id @default(cuid())
  date       DateTime
  productId  String
  views      Int      @default(0)
  addToCarts Int      @default(0)
  purchases  Int      @default(0)
  revenue    Int      @default(0)
  favorites  Int      @default(0)

  @@unique([date, productId])
  @@index([productId, date]) // ‚Üê utiliser 'date', pas 'createdAt'
  @@index([date]) // (optionnel) pratique pour filtres par p√©riode
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([productId, createdAt])
}

model AnonWishlistItem {
  id        String   @id @default(cuid())
  visitorId String // = cer_vid (cookie)
  productId String
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([visitorId, productId])
  @@index([productId, createdAt])
}
